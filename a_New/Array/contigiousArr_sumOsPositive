import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        int[] array = {-2, 7, 5, -1, 3, 1, 9, -7};
        findLargestContiguousSum(array);
    }

    public static void findLargestContiguousSum(int[] array) {
        int maxSum = 0;
        int currentSum = 0;
        int start = 0;
        int end = -1; // Initialize end as -1 to indicate no subarray found yet

        Stack<Integer> stack = new Stack<>();
        Map<Integer, List<Integer>> subarrays = new HashMap<>();

        for (int i = 0; i < array.length; i++) {
            if (array[i] >= 0) {
                currentSum += array[i];
                stack.push(array[i]);
                if (currentSum > maxSum) {
                    maxSum = currentSum;
                    end = i;
                    List<Integer> subarray = new ArrayList<>(stack);
                    subarrays.put(maxSum, subarray);
                }
            } else {
                currentSum = 0;
                stack.clear();
            }
        }

        if (end == -1) {
            System.out.println("No non-negative subarray found.");
        } else {
            List<Integer> largestSubarray = subarrays.get(maxSum);

            System.out.println("Sum: " + maxSum);
            System.out.print("Elements: ");
            for (int i = 0; i < largestSubarray.size(); i++) {
                System.out.print(largestSubarray.get(i));
                if (i < largestSubarray.size() - 1) {
                    System.out.print(", ");
                }
            }
            System.out.println();
        }
    }
}

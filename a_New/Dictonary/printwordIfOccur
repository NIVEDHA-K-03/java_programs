import java.util.*;

public class Main {
    public static void main(String[] args) {
        char[][] grid = {
            {'a', 'z', 'o', 'l'},
            {'n', 'x', 'h', 'o'},
            {'v', 'y', 'i', 'v'},
            {'o', 'r', 's', 'e'}
        };

        String[] dictionary = {"van", "zoho", "love", "are", "is"};

        findWordsInGrid(grid, dictionary);
    }

    public static void findWordsInGrid(char[][] grid, String[] dictionary) {
        Set<String> dictionarySet = new HashSet<>(Arrays.asList(dictionary));
        int rows = grid.length;
        int cols = grid[0].length;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                StringBuilder sb = new StringBuilder();
                dfs(grid, row, col, sb, dictionarySet);
            }
        }
    }

    public static void dfs(char[][] grid, int row, int col, StringBuilder sb, Set<String> dictionarySet) {
        int rows = grid.length;
        int cols = grid[0].length;

        if (row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] == ' ') {
            return;
        }

        sb.append(grid[row][col]);
        String currentWord = sb.toString();

        if (dictionarySet.contains(currentWord)) {
            System.out.println(currentWord);
            dictionarySet.remove(currentWord); // Avoid printing duplicates
        }

        char temp = grid[row][col];
        grid[row][col] = ' '; // Mark as visited

        // Move right
        dfs(grid, row, col + 1, sb, dictionarySet);

        // Move down
        dfs(grid, row + 1, col, sb, dictionarySet);

        sb.deleteCharAt(sb.length() - 1);
        grid[row][col] = temp; // Restore the character
    }
}
